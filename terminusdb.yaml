openapi: 3.0.1

info:
  title: TerminusDB API Documentation
  x-logo:
    url: https://raw.githubusercontent.com/terminusdb/terminusdb-web-assets/master/images/TerminusDB-Pop-Small.gif
  contact:
    url: https://terminusdb.com/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: latest
  description: |
    This page contains the documentation on how to use
    [TerminusDB](https://terminusdb.com/) through HTTP API operations.

    ### Resources

    To learn how to work with TerminusDB, check out the [rest of the
    documentation](https://terminusdb.com/docs/).

    For our open-source work, check out the following GitHub
    repositories:

    * Core database: [`terminusdb`](https://github.com/terminusdb/terminusdb)
    * Python client: [`terminusdb-client-python`](https://github.com/terminusdb/terminusdb-client-python)
    * JavaScript client: [`terminusdb-client-js`](https://github.com/terminusdb/terminusdb-client-js)

tags:
  - name: Databases
    description: |
      These endpoints support the management of databases.
  - name: Documents
    description: |
      These endpoints support the Document Interface.
  - name: JSON Diff & Patch
    description: |
      These endpoints support diff and patch operations on JSON.
  - name: WOQL
    description: |
      These endpoints support the Web Object Query Language (WOQL).
  - name: Branch
    description: |
      These endpoints provide branch operations on a database.
  - name: Prefixes
    description: |
      These endpoints provide access to prefixes.
  - name: Optimize
    description: |
      These endpoints provide operations to optimize a database.
  - name: Server
    description: |
      These endpoints provide information about the server.

servers:
  - url: http://localhost:6363/api
    description: A local instance of TerminusDB
  - url: https://cloud.terminusdb.com/my_team/api
    description: A TerminusX server for the team named `my_team`

security:
  - basicAuth: []

paths:

  /:
    get:
      summary: Get a list of databases for the authenticated user
      tags:
        - Databases
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Database"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /info:
    get:
      summary: Get information about the TerminusDB version
      tags:
        - Server
      responses:
        "200":
          description: succesful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:InfoResponse
                  api:info:
                    type: object
                    properties:
                      authority:
                        type: string
                        example: terminusdb://system/data/User/admin
                      storage:
                        type: object
                        properties:
                          version:
                            type: string
                            example: "1"
                      terminusdb:
                        type: object
                        properties:
                          version:
                            type: string
                            example: 10.0.13
                      terminusdb_store:
                        type: object
                        properties:
                          version:
                            type: string
                            example: 0.19.5
                  api:status:
                    type: string
                    example: api:success

  /ok:
    get:
      summary: Simple status update
      tags:
        - Server
      responses:
        "200":
          description: Succeeded

  /db/{organization}/{database}:
    post:
      summary: Create a database
      tags:
        - Databases
      parameters:
        - $ref: "#/components/parameters/organization"
        - $ref: "#/components/parameters/database"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  description: Displayed name of the database
                  type: string
                  example: Squid Species
                comment:
                  description: Description of the database
                  type: string
                  example: >
                    This database contains information on all known species of
                    the order TODO.
                public:
                  description: Visible to anonymous users
                  type: boolean
                  default: false
                schema:
                  description: Schema-checking is enabled
                  type: boolean
                  default: true
                prefixes:
                  description: Default prefixes for identifiers
                  type: object
                  properties:
                    "@base":
                      description: Default prefix for instance identifiers
                      type: string
                      default: terminusdb:///data/
                    "@schema":
                      description: Default prefix for schema identifiers
                      type: string
                      default: terminusdb:///schema#
              required:
                - comment
                - label
      responses:
        "200":
          description: Database created
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbCreateResponse
                  api:status:
                    type: string
                    example: api:success
        "400":
          description: Database already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbCreateErrorResponse
                  api:error:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: api:DatabaseAlreadyExists
                      api:database_name:
                        type: string
                        example: MyNewAlreadyExistingDatabase
                      api:organization_name:
                        type: string
                        example: admin
                  api:message:
                    type: string
                    example: Database already exists.
                  api:status:
                    type: string
                    example: api:failure
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete a database
      tags:
        - Databases
      parameters:
        - $ref: "#/components/parameters/organization"
        - $ref: "#/components/parameters/database"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                force:
                  type: boolean
                  example: false
                  description: Force database to be deleted
      responses:
        "200":
          description: Succesfully deleted DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbDeleteResponse
                  api:status:
                    type: string
                    example: api:success
        "403":
          description: Forbidden
        "404":
          description: Can't find DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    example: api:DbDeleteErrorResponse
                  api:error:
                    type: object
                    properties:
                      "@type":
                        type: string
                        example: api:UnknownDatabase
                      api:database_name:
                        type: string
                        example: MyNonExistingDatabase
                      api:organization_name:
                        type: string
                        example: admin

  /document/{path}:
    get:
      summary: Get a document
      tags:
        - Documents
      parameters:
        - $ref: "#/components/parameters/document_path"
        - $ref: "#/components/parameters/graph_type"
        - name: skip
          in: query
          description: Skip a certain amount of documents
          required: false
          schema:
            type: integer
            default: 0
        - name: count
          in: query
          description: Number of entries to show
          required: false
          schema:
            type: integer
            example: 3
        - name: minimized
          in: query
          description: Minify the output
          required: false
          schema:
            type: boolean
            default: true
        - name: as_list
          in: query
          description: Return the JSONs as list instead of concatenated json
          required: false
          schema:
            type: boolean
            default: false
        - name: unfold
          in: query
          description: Unfold the documents (join other referenced documents)
          schema:
            type: boolean
            default: true
        - name: id
          in: query
          required: false
          description: Specific document ID to look for
          schema:
            type: string
            example: Person_Robin_1991-02-01
        - name: type
          in: query
          required: false
          description: Get documents of only a specific type
          schema:
            type: string
            example: Person
      responses:
        "200":
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    "@id":
                      type: string
                      example: ClassName/instanceName
                    "@type":
                      type: string
                      example: ClassName
                    fieldName:
                      type: string
                      example: fieldValue
    post:
      summary: Insert a new document
      tags:
        - Documents
      parameters:
        - $ref: "#/components/parameters/document_path"
        - $ref: "#/components/parameters/author"
        - $ref: "#/components/parameters/message"
        - $ref: "#/components/parameters/graph_type"
        - name: full_replace
          in: query
          required: false
          description: Fully replace a document
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Succesfully added documents
          content:
            application/json:
              schema:
                type: object
                description: Added documents
    put:
      summary: Replace a document
      tags:
        - Documents
      parameters:
        - $ref: "#/components/parameters/document_path"
        - $ref: "#/components/parameters/author"
        - $ref: "#/components/parameters/message"
        - $ref: "#/components/parameters/graph_type"
        - name: create
          in: query
          description: Create a document if it does not exist
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Succesfully replaced documents
    delete:
      summary: Delete one or multiple documents
      tags:
        - Documents
      parameters:
        - $ref: "#/components/parameters/document_path"
        - $ref: "#/components/parameters/author"
        - $ref: "#/components/parameters/message"
        - $ref: "#/components/parameters/graph_type"
        - name: nuke
          in: query
          description: Totally nuke the document(s)
          schema:
            type: boolean
            default: false
        - name: id
          in: query
          description: ID of document(s)
          schema:
            type: string
            example: admin/SomeDocument
      responses:
        "200":
          description: Succesfully deleted document(s)

  /woql:
    post:
      tags:
        - WOQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WoqlQuery"
      responses:
        "200":
          description: Query result

  /woql/{path}:
    post:
      tags:
        - WOQL
      parameters:
        - name: path
          description: WOQL Path
          in: path
          required: true
          schema:
            type: string
            example: admin/foo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WoqlQuery"
      responses:
        "200":
          description: Query result

  /branch/{path}:
    post:
      tags:
        - Branch
      parameters:
        - $ref: "#/components/parameters/branch_path"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Branch succesfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type:":
                    type: string
                    enum:
                      - api:BranchResponse
                  api:status:
                    type: string
                    enum:
                      - api:success
    delete:
      tags:
        - Branch
      parameters:
        - $ref: "#/components/parameters/branch_path"
      responses:
        "200":
          description: Branch succesfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type:":
                    type: string
                    enum:
                      - api:BranchResponse
                  api:status:
                    type: string
                    enum:
                      - api:success

  /squash/{path}:
    parameters:
      - $ref: "#/components/parameters/branch_path"
    get:
      tags:
        - Branch
      responses:
        "200":
          description: Succesfully squashed the branch
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - api:SquashResponse
                  api:commit:
                    type: string
                    example: >
                      admin/test/local/commit/apgatilsa03g4lsa9ra5698wom5wcv7
                  api:old_commit:
                    type: string
                    example: >
                      admin/test/local/commit/5jndjh9lexe62q9u1q2vofyjemfnmyt
                  api:status:
                    type: string
                    enum:
                      - api:success

  /reset/{path}:
    parameters:
      - $ref: "#/components/parameters/branch_path"
    post:
      tags:
        - Branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commit_descriptor:
                  type: string
                  example: >
                    admin/test/local/commit/5jndjh9lexe62q9u1q2vofyjemfnmyt
      responses:
        "200":
          description: Succesfully reset branch HEAD to commit_descriptor
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - api:ResetResponse
                  api:status:
                    type: string
                    enum:
                      - api:success

  /optimize/{path}:
    post:
      parameters:
        - name: path
          description: WOQL Path
          in: path
          required: true
          schema:
            type: string
            example: _system
      responses:
        "200":
          description: Succesfully optimized resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  "@type":
                    type: string
                    enum:
                      - api:OptimizeResponse
                  api:status:
                    type: string
                    enum:
                      - api:success
      tags:
        - Optimize

  /prefixes/{path}:
    get:
      tags:
        - Prefixes
      parameters:
        - name: path
          description: WOQL Path
          in: path
          required: true
          schema:
            type: string
            example: _system
      responses:
        "200":
          description: Succesfully fetched prefixes of graph
          content:
            application/json:
              schema:
                type: object

  /diff:
    post:
      tags:
        - JSON Diff & Patch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                before:
                  type: object
                  example:
                    "@id": Person/Jane
                    "@type": Person
                    name: Jane
                after:
                  type: object
                  example:
                    "@id": Person/Jane
                    "@type": Person
                    name: Jannet
                keep:
                  type: object
                  example:
                    "@id": true
                    _id: true
      responses:
        "200":
          description: Successful Diff
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    "@op": ValueSwap
                    "@before": Jane
                    "@after": Janine
        "404":
          description: Failed to find diff

  /patch:
    post:
      tags:
        - JSON Diff & Patch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                before:
                  type: object
                  example:
                    "@id": Person/Jane
                    "@type": Person
                    name: Jane
                patch:
                  type: object
                  example:
                    name:
                      "@op": ValueSwap
                      "@before": Jane
                      "@after": Janine
      responses:
        "200":
          description: Successful Patch
          content:
            application/json:
              schema:
                type: object
                example:
                  "@id": Person/Jane
                  "@type": Person
                  name: Jannet
        "404":
          description: "Failed to apply patch: returning conflict patch"
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    "@op": ValueSwap
                    "@before": Doug
                    "@after": Jane

components:

  parameters:
    graph_type:
      name: graph_type
      in: query
      description: Type of the graph
      required: false
      schema:
        type: string
        default: instance
        enum:
          - instance
          - schema
    author:
      name: author
      in: query
      description: Author of commit
      required: true
      schema:
        type: string
        example: Jan
    message:
      name: message
      in: query
      description: Commit message
      required: true
      schema:
        type: string
        example: Fixed bad name for document
    branch_path:
      name: path
      in: path
      description: Path for branch
      required: true
      schema:
        type: string
        example: admin/test/local/branch/foo
    document_path:
      name: path
      in: path
      description: Path for document
      required: true
      schema:
        type: string
        example: admin/foo
    organization:
      name: organization
      in: path
      description: Organization for the database
      required: true
      schema:
        type: string
        example: admin
    database:
      name: database
      in: path
      description: Database name
      required: true
      schema:
        type: string
        example: MyNewDatabase

  schemas:
    WoqlQuery:
      type: object
      properties:
        query:
          type: object
          description: WOQL Query
        commit_info:
          $ref: "#/components/schemas/CommitInfo"
        all_witnesses:
          type: boolean
          description: Check for all errors
          default: false
    CommitInfo:
      type: object
      properties:
        author:
          type: string
          example: ExampleUser
        message:
          type: string
          example: Created something in the data product
    Database:
      type: object
      properties:
        "@id":
          type: string
          example: UserDatabase/MyUserDatabase3315d1a3bb196e322e40bc53ac
        "@type":
          type: string
          example: UserDatabase
        comment:
          type: string
          example: A comment for my database
        creation_date:
          type: string
          example: 2021-12-13T14:27:46.202Z
        label:
          type: string
          example: MyDatabaseLabel
        name:
          type: string
          example: My Database Name
        state:
          type: string
          example: finalized

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              "@type":
                type: string
                example: api:ErrorResponse
              api:error:
                type: string
              api:message:
                type: string
                example: Incorrect authentication information
              api:status:
                type: string
                example: api:failure

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
